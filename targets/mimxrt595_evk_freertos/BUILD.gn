import("//build_overrides/pigweed.gni")

import("$dir_pw_build/linker_script.gni")
import("$dir_pw_build/target_types.gni")
import("$dir_pw_docgen/docs.gni")
import("$dir_pw_malloc/backend.gni")
import("$dir_pw_third_party/freertos/freertos.gni")
import("$dir_pw_third_party/mcuxpresso/mcuxpresso.gni")
import("$dir_pw_toolchain/generate_toolchain.gni")
import("target_toolchains.gni")

generate_toolchains("target_toolchains") {
  toolchains = pw_target_toolchain_mimxrt595_evk_freertos_list
}

declare_args() {
  # When compiling with an MCUXpresso SDK, this variable is set to the path of
  # the manifest file within the SDK installation. When set, a pw_source_set
  # for a sample project SDK is created at
  # "//targets/mimxrt595_evk_freertos:sdk".
  pw_target_mimxrt595_evk_freertos_MANIFEST = ""

  # This list should contain the necessary defines for setting linker script
  # memory regions. While we don't directly use the pw_boot_cortex_m linker
  # script, these are deliberately matching to make being able to later easier.
  pw_target_mimxrt595_evk_freertos_LINK_CONFIG_DEFINES = []
}

config("pw_malloc_active") {
  if (pw_malloc_BACKEND != "") {
    defines = [ "PW_MALLOC_ACTIVE=1" ]
  }
}

config("disable_warnings") {
  cflags = [
    "-Wno-cast-qual",
    "-Wno-redundant-decls",
    "-Wno-undef",
    "-Wno-unused-parameter",
    "-Wno-unused-variable",
    "-Wno-error=strict-prototypes",
    "-Wno-sign-compare",
    "-Wno-unused-label",
    "-Wno-shadow",
    "-Wno-type-limits",
    "-Wno-unused-function",
  ]
  visibility = [ ":*" ]
}

config("freestanding") {
  cflags = [
    "-ffreestanding",
    "-fno-builtin",
  ]
  asmflags = cflags
  ldflags = cflags
  visibility = [ ":*" ]
}

config("sdk_defines") {
  defines = [
    "CPU_MIMXRT595SFFOC_cm33",
    "DEBUG_CONSOLE_TRANSFER_NON_BLOCKING",
    "SDK_DEBUGCONSOLE=1",
  ]
  visibility = [ ":*" ]
}

if (current_toolchain != default_toolchain) {
  pw_linker_script("flash_linker_script") {
    defines = pw_target_mimxrt595_evk_freertos_LINK_CONFIG_DEFINES
    linker_script = "mimxrt595_flash.ld"
  }
}

if (pw_third_party_mcuxpresso_SDK != "") {
  # Startup and vector table for NXP MIMXRT595-EVK.
  pw_source_set("boot") {
    public_configs = [ ":pw_malloc_active" ]
    deps = [
      "$dir_pw_boot",
      "$dir_pw_boot_cortex_m:armv8m",
      "$dir_pw_malloc",
      "$dir_pw_preprocessor",
      "$dir_pw_sys_io_mcuxpresso",
      "$dir_pw_third_party/freertos",
      "$dir_pw_third_party/freertos:support",
      pw_third_party_mcuxpresso_SDK,
    ]
    if (pw_malloc_BACKEND != "") {
      deps += [ "$dir_pw_malloc" ]
    }
    sources = [
      "boot.cc",
      "vector_table.c",
    ]
  }
}

if (pw_third_party_mcuxpresso_SDK == "//targets/mimxrt595_evk_freertos:sdk") {
  pw_mcuxpresso_sdk("sdk") {
    manifest = pw_target_mimxrt595_evk_freertos_MANIFEST
    include = [
      "project_template.evkmimxrt595.MIMXRT595S",
      "component.serial_manager_uart.MIMXRT595S",
      "platform.drivers.flexcomm_i2c.MIMXRT595S",
      "platform.drivers.flexcomm_spi.MIMXRT595S",
      "platform.drivers.flexcomm_usart_dma.MIMXRT595S",
      "platform.drivers.flexcomm_usart_freertos.MIMXRT595S",
      "platform.drivers.flexio_spi.MIMXRT595S",
      "platform.drivers.inputmux.MIMXRT595S",
      "platform.drivers.lpc_dma.MIMXRT595S",
      "platform.drivers.lpc_gpio.MIMXRT595S",
      "platform.drivers.mu.MIMXRT595S",
      "platform.drivers.pint.MIMXRT595S",
      "platform.drivers.power.MIMXRT595S",
      "platform.drivers.common.MIMXRT595S",
      "utility.debug_console.MIMXRT595S",
      "middleware.edgefast_bluetooth.config.template.MIMXRT595S",
      "middleware.edgefast_bluetooth.k32w061.controller.MIMXRT595S",
      "middleware.edgefast_bluetooth.ble.ethermind.cm33.MIMXRT595S",
      # USB support
      "device.MIMXRT595S_CMSIS.MIMXRT595S",
      "middleware.usb.device_controller_ip3511hs.MIMXRT595S",
      "middleware.usb.phy.MIMXRT595S",
      "middleware.usb.device.controller.driver.MIMXRT595S",
      "middleware.usb.device.ip3511hs_config_header.MIMXRT595S",
      "middleware.usb.device.common_header.MIMXRT595S",
      "middleware.usb.common_header.MIMXRT595S"
    ]
    exclude = [
      "device.MIMXRT595S_startup.MIMXRT595S",

      # Don't need to generate build rules for freertos, we use pigweed's.
      "middleware.freertos-kernel.MIMXRT595S",
      "middleware.freertos-kernel.heap_4.MIMXRT595S"
    ]

    public_configs = [
      ":disable_warnings",
      ":freestanding",
      ":sdk_defines",
    ]

    public_deps = [
      ":mimxrt595_config",
      "$dir_pw_third_party/freertos",
    ]
  }

  config("config_public_includes") {
    include_dirs = [ "board" ]
    visibility = [ ":*" ]
  }

  config("config_public_defines") {
    defines = [
      "CPU_MIMXRT595SFFOC_cm33",
      "DEBUG_CONSOLE_DISABLE_RTOS_SYNCHRONIZATION",
      "FSL_RTOS_FREE_RTOS",
      "FSL_SDK_DRIVER_QUICK_ACCESS_ENABLE=1",
      "SDK_DEBUGCONSOLE=1",
      "SDK_OS_FREE_RTOS",
    # BT config
      "CONFIG_BT_ID_MAX=1",
      "CONFIG_BT_MAX_CONN=1",
      "CONFIG_BT_MSG_QUEUE_COUNT=16",
      "CONFIG_BT_HCI_RESERVE=4",
      "CONFIG_BT_CONN_TX_USER_DATA_SIZE=8",
      "CONFIG_BT_ATT_TX_COUNT=3",
      "CONFIG_BT_BUF_ACL_RX_SIZE=27",
      "CONFIG_BT_L2CAP_TX_MTU=23",
      "CONFIG_BT_BUF_ACL_RX_COUNT=6",
      "CONFIG_BT_ATT_RX_MAX=6",
      "CONFIG_BT_CONN=1",
      "CONFIG_BT_MAX_PAIRED=1",
      "CONFIG_BT_BUF_EVT_RX_COUNT=10",
      "CONFIG_BT_L2CAP_TX_BUF_COUNT=3",
      "CONFIG_BT_BUF_EVT_RX_SIZE=255",
      "CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT=5000",
      "CONFIG_BT_CONN_TX_MAX=3",
      "CONFIG_BT_BUF_RESERVE=8",
      "CONFIG_NET_BUF_USER_DATA_SIZE=8",
      "CONFIG_BT_HCI_TX_PRIO=2",
      "CONFIG_BT_HCI_TX_STACK_SIZE=1024",
      "CONFIG_BT_RX_STACK_SIZE=1024",
      "CONFIG_BT_RX_PRIO=1",
      "CONFIG_BT_BUF_CMD_TX_COUNT=2",
      "CONFIG_BT_BUF_CMD_TX_SIZE=65",
      "CONFIG_BT_DEVICE_NAME=\"Pigweed\"",
      "CONFIG_BT_DEVICE_APPEARANCE=1",
      "CONFIG_BT_CONN_TX=1",
      "CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT=3",
      "CONFIG_BT_BUF_EVT_DISCARDABLE_SIZE=43",
      "CONFIG_BT_BROADCASTER=1",
      "CONFIG_BT_LIM_ADV_TIMEOUT=30",
      "K32W061_TRANSCEIVER",
      # USB config
      "USB_STACK_USE_DEDICATED_RAM=1",
      "FSL_OSA_BM_TASK_ENABLE=0",
      "FSL_OSA_BM_TIMER_CONFIG=0",
    ]
    visibility = [ ":*" ]
  }

  # Project-specific board configuration.
  pw_source_set("mimxrt595_config") {
    public_configs = [
      ":config_public_defines",
      ":config_public_includes",
      ":disable_warnings",
      ":sdk__defines",
      ":sdk__includes",
    ]
  }

  # Project-specific FreeRTOS configurations.
  config("freertos_config_public_includes") {
    include_dirs = [ "." ]
    visibility = [ ":*" ]
  }

  pw_source_set("freertos_config") {
    public_configs = [
      ":config_public_defines",
      ":config_public_includes",
      ":disable_warnings",
      ":freertos_config_public_includes",
    ]
    public_deps = [ "$dir_pw_third_party/freertos:config_assert" ]
    public = [ "FreeRTOSConfig.h" ]
  }

  # Project-specific FreeRTOS port.
  _freertos_port_dir =
      "$dir_pw_third_party_freertos/portable/GCC/ARM_CM33_NTZ/non_secure"
  config("freertos_port_public_includes") {
    include_dirs = [
      "$_freertos_port_dir",
      "$dir_pw_third_party_freertos/include",
    ]
    visibility = [ ":*" ]
  }

  pw_source_set("freertos_port") {
    public_configs = [ ":freertos_port_public_includes" ]
    public = [
      "$_freertos_port_dir/portasm.h",
      "$_freertos_port_dir/portmacro.h",
    ]
    configs = [ ":disable_warnings" ]
    sources = [
      "$_freertos_port_dir/port.c",
      "$_freertos_port_dir/portasm.c",
      "$dir_pw_third_party_freertos/portable/MemMang/heap_4.c",
    ]
    deps = [ ":freertos_config" ]
  }
}

pw_doc_group("target_docs") {
  sources = [ "target_docs.rst" ]
}
